generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  username          String   @unique
  email             String   @unique
  password          String
  name              String?
  bio               String?
  avatar            String?
  status            UserStatus @default(OFFLINE)
  lastActive        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  messages          Message[]
  conversations     ParticipantsOnConversations[]
  readReceipts      ReadReceipt[]
  sentFriendRequests FriendRequest[] @relation("Sender")
  receivedFriendRequests FriendRequest[] @relation("Receiver")
  friends           Friend[] @relation("UserFriends")
  friendsOf         Friend[] @relation("FriendsOfUser")
  blockedUsers      BlockedUser[] @relation("Blocker")
  blockedBy         BlockedUser[] @relation("Blocked")
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  DO_NOT_DISTURB
}

model Conversation {
  id           String   @id @default(uuid())
  type         ConversationType @default(DIRECT)
  name         String?  // For group chats
  description  String?
  avatar       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastMessageAt DateTime @default(now())
  createdBy    String?  // References userId
  
  // Relations
  messages     Message[]
  participants ParticipantsOnConversations[]
}

enum ConversationType {
  DIRECT
  GROUP
}

model ParticipantsOnConversations {
  userId         String
  conversationId String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())
  isMuted        Boolean @default(false)
  isHidden       Boolean @default(false)
  
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

enum ParticipantRole {
  OWNER
  ADMIN
  MEMBER
}

model Message {
  id             String   @id @default(uuid())
  content        String
  contentType    MessageContentType @default(TEXT)
  senderId       String
  conversationId String
  replyToId      String?
  isEdited       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  sender         User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  replyTo        Message? @relation("ReplyToMessage", fields: [replyToId], references: [id], onDelete: SetNull)
  replies        Message[] @relation("ReplyToMessage")
  readReceipts   ReadReceipt[]
  reactions      MessageReaction[]
}

enum MessageContentType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

model ReadReceipt {
  id        String   @id @default(uuid())
  userId    String
  messageId String
  readAt    DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
}